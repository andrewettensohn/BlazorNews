@page "/"

<div class="main @Theme.MainBackground">
    <div class="content">
        <CascadingValue Value="Theme">
            <Container>
                <div class="row px-3">
                    <div class="col">
                        <h6 class="@Theme.TextColor">Hacker News Feed</h6>
                    </div>
                    <div class="col-3">
                        <div class="spinner-border @loadingCss float-right @Theme.TextColor" role="status"></div>
                    </div>
                </div>
                <Tabs Class="@Theme.Tabs" SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" FullWidth="true" Justified="true">
                    <Items>
                        <Tab Class="@Theme.NavItem" Name="feed">Feed</Tab>
                        <Tab Class="@Theme.NavItem" Name="saved">Saved</Tab>
                        <Tab Class="@Theme.NavItem" Name="settings">Settings</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="feed">
                            <div class="scroll-window">
                                <Virtualize ItemsProvider="async (x) => await LoadMoreArticles(x)" Context="article">
                                    <ItemContent>
                                        <ArticleItemComponent Article="article" DeleteArticle="DeleteArticle" SaveArticle="SaveArticle" />
                                    </ItemContent>
                                    <Placeholder>
                                        <LoadingPlaceholderComponentrazor />
                                    </Placeholder>
                                </Virtualize>
                            </div>
                        </TabPanel>
                        <TabPanel Name="saved">
                            <div class="scroll-window">
                                <Virtualize Items="@SavedArticles" Context="article">
                                    <ArticleItemComponent Article="article" SaveArticle="SaveArticle" DeleteArticle="DeleteArticle" />
                                </Virtualize>
                            </div>
                        </TabPanel>
                        <TabPanel Name="settings">
                            <div class="scroll-window">
                                <SettingsComponent DeleteAllSavedArticles="DeleteAllSavedArticles" ToggleTheme="ToggleThemeSetting" />
                            </div>
                        </TabPanel>
                    </Content>
                </Tabs>
            </Container>
        </CascadingValue>
        
    </div>
</div>

@code
{
    [Inject]
    public RestService RestService { get; set; }

    [Inject]
    ILocalStorageService LocalStorage { get; set; }

    private List<Article> SavedArticles { get; set; } = new List<Article>();
    private string loadingCss = string.Empty;
    private string selectedTab = "feed";
    private BlazorNewsTheme Theme { get; set; } = new BlazorNewsTheme();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await GetTheme();
            await GetSavedArticles();
            await LoadMoreArticles(new ItemsProviderRequest(0, 15, CancellationToken.None));
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        if (selectedTab == "saved")
        {
            SavedArticles = await GetSavedArticles();
        }
    }

    private async ValueTask<ItemsProviderResult<Article>> LoadMoreArticles(ItemsProviderRequest request)
    {
        loadingCss = string.Empty;
        try
        {
            if(RestService.ArticleIds is null)
            {
                await RestService.GetArticleIds();
            }

            int numArticles = Math.Min(request.Count, RestService.ArticleIds.Count - request.StartIndex);
            List<Article> newArticles = await RestService.GetArticlesFromIds(request.StartIndex, numArticles);

            if (newArticles != null && newArticles.Count > 0)
            {
                SetArticleSaveToTrueIfSaved(newArticles);

                loadingCss = "d-none";
                return new ItemsProviderResult<Article>(newArticles, RestService.ArticleIds.Count);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        loadingCss = "d-none";
        return new ItemsProviderResult<Article>(new List<Article>(), RestService.ArticleIds.Count);
    }

    private List<Article> SetArticleSaveToTrueIfSaved(List<Article> articles)
    {
        articles.ForEach(x =>
        {
            if (SavedArticles.Any(y => y.Id == x.Id))
            {
                x.Saved = true;
            }
        });

        return articles;
    }

    private async Task SaveArticle(Article article)
    {
        article.Saved = true;
        List<Article> savedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");

        if (savedArticles != null)
        {
            if (!savedArticles.Any(x => x.Id == article.Id))
            {
                savedArticles.Add(article);
                await LocalStorage.SetItemAsync("savedArticles", savedArticles);
            }
        }
        else
        {
            savedArticles = new List<Article> { article };
            await LocalStorage.SetItemAsync("savedArticles", savedArticles);
        }

        savedArticles = SetArticleSaveToTrueIfSaved(savedArticles);
    }

    private async Task<List<Article>> GetSavedArticles()
    {
        List<Article> localSavedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");

        if (localSavedArticles != null && localSavedArticles.Count > 0)
        {
            SavedArticles = localSavedArticles;
            SavedArticles.ForEach(x => x.Saved = true);

            return SavedArticles;
        }
        else
        {
            return new List<Article>();
        }
    }

    private async Task DeleteAllSavedArticles()
    {
        await LocalStorage.ClearAsync();
    }

    private async Task DeleteArticle(Article article)
    {
        article.Saved = false;
        List<Article> savedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");
        savedArticles.RemoveAll(x => x.Id == article.Id);
        await LocalStorage.SetItemAsync("savedArticles", savedArticles);
        await GetSavedArticles();
    }

    private async Task GetTheme()
    {
        string themeSetting = await LocalStorage.GetItemAsStringAsync("themeSetting");
        bool parseThemeSetting = bool.TryParse(themeSetting, out bool isDark);

        if(parseThemeSetting && isDark)
        {
            Theme.ToggleTheme(true);
        }
        else
        {
            Theme.ToggleTheme(false);
        }
    }

    private async Task ToggleThemeSetting()
    {

        string themeSetting = await LocalStorage.GetItemAsStringAsync("themeSetting");
        bool parseThemeSetting = bool.TryParse(themeSetting, out bool isDark);

        if (parseThemeSetting && !isDark)
        {
            await LocalStorage.SetItemAsync("themeSetting", "true");
        }
        else
        {
            await LocalStorage.SetItemAsync("themeSetting", "false");
        }

        await GetTheme();
    }
}