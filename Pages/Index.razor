@page "/"

<div class="main @Theme.MainBackground">
    <div class="content">
        <CascadingValue Value="Theme">
            <Container>
                <div class="row px-3">
                    <div class="col">
                        <h6 class="@Theme.TextColor">Hacker News Feed</h6>
                    </div>
                    <div class="col-3">
                        <div class="spinner-border @LoadingCss float-right @Theme.TextColor" role="status"></div>
                    </div>
                </div>
                <ul class="nav nav-pills nav-fill">
                    <li class="nav-item rounded @TabSelectionVisbility.FeedActiveCss">
                        <a href="#" class="nav-link @Theme.TextColor" @onclick="() => OnChangeTabSelection(TabSelection.Feed)">Feed</a>
                    </li>
                    <li class="nav-item rounded @TabSelectionVisbility.SavedActiveCss">
                        <a href="#" class="nav-link @Theme.TextColor" @onclick="() => OnChangeTabSelection(TabSelection.Saved)">Saved</a>
                    </li>
                    <li class="nav-item rounded @TabSelectionVisbility.SettingsActiveCss">
                        <a href="#" class="nav-link @Theme.TextColor" @onclick="() => OnChangeTabSelection(TabSelection.Settings)">Settings</a>
                    </li>
                </ul>
                <div class="@TabSelectionVisbility.DisplayFeedCss">
                    <div class="scroll-window">
                        <Virtualize ItemsProvider="async (x) => await LoadMoreArticles(x)" Context="article" OverscanCount="20">
                            <ItemContent>
                                <ArticleItemComponent Article="article" DeleteArticle="DeleteArticle" SaveArticle="SaveArticle" />
                            </ItemContent>
                        </Virtualize>
                    </div>
                </div>
                <div class="@TabSelectionVisbility.DisplaySavedCss">
                    <div class="scroll-window">
                        @if (SavedArticles.Any())
                        {
                            <Virtualize Items="@SavedArticles" Context="article">
                                <ArticleItemComponent Article="article" SaveArticle="SaveArticle" DeleteArticle="DeleteArticle" />
                            </Virtualize>
                        }
                        else
                        {
                            <div class="row mt-3 justify-content-center">
                                <span class="@Theme.TextColor">You have no saved articles.</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="@TabSelectionVisbility.DisplaySettingsCss">
                    <div class="scroll-window">
                        <SettingsComponent DeleteAllSavedArticles="DeleteAllSavedArticles" ToggleTheme="ToggleThemeSetting" />
                    </div>
                </div>
            </Container>
        </CascadingValue>
    </div>
</div>

@code
{
    [Inject]
    public RestService RestService { get; set; }

    [Inject]
    ILocalStorageService LocalStorage { get; set; }

    private List<Article> SavedArticles { get; set; } = new List<Article>();
    private BlazorNewsTheme Theme { get; set; } = new BlazorNewsTheme();
    private TabSelectionVisbility TabSelectionVisbility { get; set; } = new TabSelectionVisbility();

    private string LoadingCss = string.Empty;

    private async Task OnChangeTabSelection(TabSelection tabSelection)
    {
        TabSelectionVisbility.SetAllVisibility(false);
        await SetVisbilityForTabSelection(tabSelection);
        StateHasChanged();
    }

    private async Task SetVisbilityForTabSelection(TabSelection tabSelection)
    {
        if (tabSelection == TabSelection.Feed)
        {
            TabSelectionVisbility.DisplayFeed = true;
        }
        else if (tabSelection == TabSelection.Saved)
        {
            SavedArticles = await GetSavedArticles();
            TabSelectionVisbility.DisplaySaved = true;
        }
        else if (tabSelection == TabSelection.Settings)
        {
            TabSelectionVisbility.DisplaySettings = true;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await SetVisbilityForTabSelection(TabSelection.Feed);
            await GetTheme();
            await GetSavedArticles();
            await LoadMoreArticles(new ItemsProviderRequest(0, 15, CancellationToken.None));
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async ValueTask<ItemsProviderResult<Article>> LoadMoreArticles(ItemsProviderRequest request)
    {
        LoadingCss = string.Empty;
        StateHasChanged();

        try
        {
            if(RestService.ArticleIds is null)
            {
                await RestService.GetArticleIds();
            }

            int numArticles = Math.Min(request.Count, RestService.ArticleIds.Count - request.StartIndex);
            List<Article> newArticles = await RestService.GetArticlesFromIds(request.StartIndex, numArticles);

            if (newArticles != null && newArticles.Count > 0)
            {
                SetArticleSaveToTrueIfSaved(newArticles);

                LoadingCss = "d-none";
                StateHasChanged();
                return new ItemsProviderResult<Article>(newArticles, RestService.ArticleIds.Count);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        LoadingCss = "d-none";
        StateHasChanged();
        return new ItemsProviderResult<Article>(new List<Article>(), RestService.ArticleIds.Count);
    }

    private List<Article> SetArticleSaveToTrueIfSaved(List<Article> articles)
    {
        articles.ForEach(x =>
        {
            if (SavedArticles.Any(y => y.Id == x.Id))
            {
                x.Saved = true;
            }
        });

        return articles;
    }

    private async Task SaveArticle(Article article)
    {
        article.Saved = true;
        List<Article> savedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");

        if (savedArticles != null)
        {
            if (!savedArticles.Any(x => x.Id == article.Id))
            {
                savedArticles.Add(article);
                await LocalStorage.SetItemAsync("savedArticles", savedArticles);
            }
        }
        else
        {
            savedArticles = new List<Article> { article };
            await LocalStorage.SetItemAsync("savedArticles", savedArticles);
        }

        savedArticles = SetArticleSaveToTrueIfSaved(savedArticles);
    }

    private async Task<List<Article>> GetSavedArticles()
    {
        List<Article> localSavedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");

        if (localSavedArticles != null && localSavedArticles.Count > 0)
        {
            SavedArticles = localSavedArticles;
            SavedArticles.ForEach(x => x.Saved = true);

            return SavedArticles;
        }
        else
        {
            return new List<Article>();
        }
    }

    private async Task DeleteAllSavedArticles()
    {
        await LocalStorage.ClearAsync();
    }

    private async Task DeleteArticle(Article article)
    {
        article.Saved = false;
        List<Article> savedArticles = await LocalStorage.GetItemAsync<List<Article>>("savedArticles");
        savedArticles.RemoveAll(x => x.Id == article.Id);
        await LocalStorage.SetItemAsync("savedArticles", savedArticles);
        await GetSavedArticles();
    }

    private async Task GetTheme()
    {
        string themeSetting = await LocalStorage.GetItemAsStringAsync("themeSetting");
        bool parseThemeSetting = bool.TryParse(themeSetting, out bool isDark);

        if(parseThemeSetting && isDark)
        {
            Theme.ToggleTheme(true);
            TabSelectionVisbility.ActiveTabCss = Theme.ActiveTab;
        }
        else
        {
            Theme.ToggleTheme(false);
            TabSelectionVisbility.ActiveTabCss = Theme.ActiveTab;
        }
    }

    private async Task ToggleThemeSetting()
    {

        string themeSetting = await LocalStorage.GetItemAsStringAsync("themeSetting");
        bool parseThemeSetting = bool.TryParse(themeSetting, out bool isDark);

        if (parseThemeSetting && !isDark)
        {
            await LocalStorage.SetItemAsync("themeSetting", "true");
        }
        else
        {
            await LocalStorage.SetItemAsync("themeSetting", "false");
        }

        await GetTheme();
    }
}